{"version":3,"sources":["style/auto-prefix.js"],"names":["isBrowser","require","Modernizr","undefined","prefixedKeys","module","exports","all","styles","prefixedStyle","key","single","set","style","value","hasOwnProperty","prefKey","prefixed","singleHyphened","str","replace","m1","toLowerCase"],"mappings":";;AAAA,IAAMA,YAAYC,OAAZ,sBAAN;;AAEA,IAAMC,YAAYF,YAAYC,OAAZ,kCAAkDE,SAApE;;AAEA;AACA,IAAIC,eAAe,EAAnB;;AAEAC,OAAOC,OAAP,GAAiB;AAEfC,KAFe,eAEXC,MAFW,EAEH;AACV,QAAIC,gBAAgB,EAApB;AACA,SAAK,IAAIC,GAAT,IAAgBF,MAAhB,EAAwB;AACtBC,oBAAc,KAAKE,MAAL,CAAYD,GAAZ,CAAd,IAAkCF,OAAOE,GAAP,CAAlC;AACD;AACD,WAAOD,aAAP;AACD,GARc;AAUfG,KAVe,eAUXC,KAVW,EAUJH,GAVI,EAUCI,KAVD,EAUQ;AACrBD,UAAM,KAAKF,MAAL,CAAYD,GAAZ,CAAN,IAA0BI,KAA1B;AACD,GAZc;AAcfH,QAde,kBAcRD,GAdQ,EAcH;;AAEV;AACA;AACA,QAAI,CAACV,SAAL,EAAgB,OAAOU,GAAP;;AAEhB;AACA,QAAIN,aAAaW,cAAb,CAA4BL,GAA5B,CAAJ,EAAsC,OAAON,aAAaM,GAAb,CAAP;;AAEtC;AACA,QAAMM,UAAUd,UAAUe,QAAV,CAAmBP,GAAnB,CAAhB;;AAEA;AACA;AACA,QAAIM,YAAY,KAAhB,EAAuB,OAAON,GAAP;;AAEvB;AACAN,iBAAaM,GAAb,IAAoBM,OAApB;AACA,WAAOA,OAAP;AAED,GAlCc;AAoCfE,gBApCe,0BAoCAR,GApCA,EAoCK;AAClB,QAAIS,MAAM,KAAKR,MAAL,CAAYD,GAAZ,CAAV;;AAEA,WAAO,CAACS,GAAD,GAAOT,GAAP,GAAaS,IAAIC,OAAJ,CAAY,UAAZ,EAAwB,UAACD,GAAD,EAAME,EAAN,EAAa;AACvD,aAAO,MAAMA,GAAGC,WAAH,EAAb;AACD,KAFmB,EAEjBF,OAFiB,CAET,MAFS,EAED,MAFC,CAApB;AAGD;AA1Cc,CAAjB","file":"auto-prefix.js","sourcesContent":["const isBrowser = require('util/is-browser');\n\nconst Modernizr = isBrowser ? require('util/modernizr.custom.js') : undefined;\n\n//Keep track of already prefixed keys so we can skip Modernizr prefixing\nlet prefixedKeys = {};\n\nmodule.exports = {\n\n  all(styles) {\n    let prefixedStyle = {};\n    for (let key in styles) {\n      prefixedStyle[this.single(key)] = styles[key];\n    }\n    return prefixedStyle;\n  },\n\n  set(style, key, value) {\n    style[this.single(key)] = value;\n  },\n\n  single(key) {\n\n    //If a browser doesn't exist, we can't prefix with Modernizr so\n    //just return the key\n    if (!isBrowser) return key;\n\n    //Check if we've prefixed this key before, just return it\n    if (prefixedKeys.hasOwnProperty(key)) return prefixedKeys[key];\n\n    //Key hasn't been prefixed yet, prefix with Modernizr\n    const prefKey = Modernizr.prefixed(key);\n\n    // Windows 7 Firefox has an issue with the implementation of Modernizr.prefixed\n    // and is capturing 'false' as the CSS property name instead of the non-prefixed version.\n    if (prefKey === false) return key;\n\n    //Save the key off for the future and return the prefixed key\n    prefixedKeys[key] = prefKey;\n    return prefKey;\n\n  },\n\n  singleHyphened(key) {\n    let str = this.single(key);\n\n    return !str ? key : str.replace(/([A-Z])/g, (str, m1) => {\n      return '-' + m1.toLowerCase();\n    }).replace(/^ms-/, '-ms-');\n  },\n\n};\n"]}