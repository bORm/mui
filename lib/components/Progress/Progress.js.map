{"version":3,"sources":["components/Progress/Progress.js"],"names":["UPDATE_TIME","MAX_PROGRESS","PROGRESS_INCREASE","ANIMATION_TIME","initialState","buffer","percent","progressInterval","animationTimeout","Progress","props","state","boundSimulateProgress","simulateProgress","bind","boundResetProgress","resetProgress","launch","nextProps","progress","clearInterval","clearTimeout","setInterval","updateTime","setState","setTimeout","maxProgress","progressIncrease","onProgress","onDone","style","width","transition","zIndex","buildStyle","active","shouldShow","className","Component","propTypes","object","string","actions","number","defaultProps","undefined"],"mappings":"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","file":"Progress.js","sourcesContent":["import React, { PropTypes } from 'react'\nimport classNames from 'helpers/classNames'\n\nexport const UPDATE_TIME = 100;\nexport const MAX_PROGRESS = 80;\nexport const PROGRESS_INCREASE = 1;\nexport const ANIMATION_TIME = UPDATE_TIME * 2;\n\nconst initialState = {\n  buffer: 0,\n  percent: 0,\n  progressInterval: null,\n  animationTimeout: null,\n};\n\nexport class Progress extends React.Component {\n\n  static propTypes = {\n    style: PropTypes.object,\n    className: PropTypes.string,\n    actions: PropTypes.object,\n    progress: PropTypes.number,\n    updateTime: PropTypes.number,\n    maxProgress: PropTypes.number,\n    progressIncrease: PropTypes.number\n  };\n\n  static defaultProps = {\n    style: {},\n    className: undefined,\n    progress: 0,\n    updateTime: UPDATE_TIME,\n    maxProgress: MAX_PROGRESS,\n    progressIncrease: PROGRESS_INCREASE,\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = initialState;\n\n    this.progressInterval = null;\n    this.animationTimeout = null;\n    this.boundSimulateProgress = this.simulateProgress.bind(this);\n    this.boundResetProgress = this.resetProgress.bind(this)\n  }\n\n  componentDidMount(){\n    this.launch();\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.progress > this.props.progress) {\n      this.launch()\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.progressInterval);\n    clearTimeout(this.animationTimeout)\n  }\n\n  launch() {\n    let { percent, buffer } = this.state;\n\n    if (!this.progressInterval) {\n      this.progressInterval = setInterval(\n        this.boundSimulateProgress,\n        this.props.updateTime\n      );\n      clearTimeout(this.animationTimeout);\n      percent = 0;\n      buffer = 0;\n    }\n\n    this.setState({\n      ...this.state,\n      percent,\n      buffer\n    })\n  }\n\n  simulateProgress() {\n    let { percent, buffer } = this.state;\n    if (percent === 100) {\n      this.animationTimeout = setTimeout(this.boundResetProgress, ANIMATION_TIME);\n      clearInterval(this.progressInterval);\n      this.progressInterval = null;\n    } else if (this.props.progress === null) {\n      percent = 100;\n      buffer = 100;\n    } else if (percent < this.props.maxProgress) {\n      percent = percent + this.props.progressIncrease\n      if ( percent < 35 )\n      {\n        buffer = 50;\n      }\n      if ( percent < 50 )\n      {\n        buffer = 70;\n      }\n      else\n      {\n        buffer = 100;\n      }\n    }\n\n    this.setState({ percent, buffer });\n    \n    this.props.onProgress(percent);\n  }\n\n  resetProgress() {\n    clearTimeout(this.animationTimeout);\n    this.setState(initialState, ()=>{\n      this.props.onDone();\n    });\n  }\n\n  static shouldShow(percent) {\n    return (percent > 0) && (percent < 100)\n  }\n\n  buildStyle() {\n    //console.log(this.state.percent)\n    const style = {\n      progress: {\n        width: `${this.state.percent}%`,\n        transition: `width ${ANIMATION_TIME}ms linear,\n                   height ${ANIMATION_TIME}ms linear`,\n        zIndex: 2\n      },\n      buffer: {\n        width: `${this.state.buffer}%`\n      }\n    };\n\n    return { ...style, ...this.props.style }\n  }\n\n  render() {\n    const style = this.buildStyle();\n    let active = Progress.shouldShow(this.state.percent);\n\n    return (\n      <div className={classNames(\n        'progress', 'clearfix',\n        this.props.className, {active}\n      )}>\n        <span className=\"bar bar-progress\" style={style.progress} />\n        <span style={style.buffer} className=\"bar bar-buffer\"/>\n        <svg className=\"bar bar-dotted\">\n          <line className=\"line\"\n                x1=\"2\" x2=\"10000\" y1=\"2\" y2=\"2\" />\n        </svg>\n      </div>\n    )\n  }\n}\n\nexport default Progress"]}