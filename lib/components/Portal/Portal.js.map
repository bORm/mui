{"version":3,"sources":["components/Portal/Portal.js"],"names":["renderSubtreeIntoContainer","unstable_renderSubtreeIntoContainer","emitter","canUseDOM","PortalContent","component","props","_target","_component","render","componentWillUnmount","unMount","id","className","isOpen","portal","document","getElementById","createElement","mountTo","appendChild","child","timer","setTimeout","open","clearTimeout","children","removeChild","propTypes","onClose","func","node","onModalDidMount","onModalWillUnmount","defaultProps","toggle","before","after","Portal","state","once","setState","other","emit","bool"],"mappings":"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","file":"Portal.js","sourcesContent":["import React, { Component, PropTypes } from 'react';\nimport ReactDOM, { render, findDOMNode, unmountComponentAtNode } from 'react-dom';\nconst renderSubtreeIntoContainer = ReactDOM.unstable_renderSubtreeIntoContainer;\n\nimport EventEmitter from 'fbemitter/lib/BaseEventEmitter';\nconst emitter = new EventEmitter();\n\nimport ExecutionEnvironment from 'exenv';\nconst { canUseDOM } = ExecutionEnvironment;\nimport { classNames } from 'helpers'\n// import isMounted from 'util/isMounted'\n// import Modal from 'react-modal'\n\n/*class Portal extends Component {\n\n\tstatic propTypes = {\n\t\tonClickOut: PropTypes.func,\n\t\tisOpen: PropTypes.bool\n\t};\n\n\tstatic defaultProps = {\n\t\tisOpen: false\n\t};\n\n\tstatic node = null;\n\tconstructor(props, context) {\n\t\tsuper(props, context);\n\t\tthis.state = {\n\t\t\tisOpen: props.isOpen\n\t\t};\n\n\t\tif (canUseDOM) {\n\n\t\t\tif ( !document.getElementById(props.id) ) {\n\t\t\t\tPortal.node = document.createElement('div');\n\t\t\t\tPortal.node.id = props.id;\n\t\t\t\tdocument.body.appendChild(Portal.node);\n\t\t\t}\n\n\t\t\tthis.handleClickOut = e => {\n\t\t\t\tif (typeof this.props.onClickOut === 'function') {\n\t\t\t\t\tconst root = findDOMNode(this.element);\n\t\t\t\t\tif (!root.contains(e.target)) {\n\t\t\t\t\t\tthis.props.onClickOut(e, Portal.node, this.element);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tdocument.addEventListener('click', this.handleClickOut);\n\t\t}\n\t\tthis.componentWillUnmount = props.componentWillUnmount || ::this.unMount;\n\t}\n\n\tcomponentDidMount() {\n\t\tconst { id, isOpen } = this.props;\n\t\tthis.toggle(id, Portal.isBool(isOpen));\n\t}\n\n\tstatic isBool(boolean) {\n\t\treturn typeof boolean === 'boolean' ? boolean : false;\n\t}\n\tstatic toggle = (id, isOpen)=> {\n\t\tPortal.isOpen[id] = Portal.isBool(isOpen);\n\t\temitter.emit('toggle', id, isOpen);\n\t};\n\n\tstatic isOpen = {};\n\ttoggle(id, isOpen){\n\t\tdebugger\n\t\temitter.once('toggle', ::this.toggle);\n\t\tPortal.isOpen[id] = Portal.isBool(isOpen);\n\t\tthis.mount(this.props, Portal.isOpen);\n\t}\n\n\tcomponentDidUpdate(props, state) { // eslint-disable-line\n\t\t// console.log(props, state);\n\t\tconsole.log(Portal.isOpen);\n\t\tPortal.isOpen[props.id] && this.mount(props, Portal.isOpen);\n\t}\n\tmount(props, isOpen){\n\t\tprops = props || this.props;\n\t\tif ( isOpen[props.id] ) {\n\n\t\t\tif ( !this.element ) {\n\t\t\t\tthis.element = renderSubtreeIntoContainer(\n\t\t\t\t\tthis,\n\t\t\t\t\t<div/>,\n\t\t\t\t\tPortal.node\n\t\t\t\t);\n\t\t\t\trender(\n\t\t\t\t\t<div {...((props)=>{\n\t\t\t\t\t\tdelete props.isOpen;\n\t\t\t\t\t\tdelete props.id;\n\t\t\t\t\t\treturn props;\n\t\t\t\t\t})({...props, ...{}})} style={{\n\t\t\t\t\t\tposition: 'fixed',\n\t\t\t\t\t\ttop: 0,\n\t\t\t\t\t\tright: 0,\n\t\t\t\t\t\tbottom: 0,\n\t\t\t\t\t\tleft: 0,\n\t\t\t\t\t\tmargin: 'auto',\n\t\t\t\t\t\twidth: 400,\n\t\t\t\t\t\theight: 400,\n\t\t\t\t\t\tbackgroundColor: '#fff',\n\t\t\t\t\t\tboxShadow: '0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23)',\n\t\t\t\t\t\tpadding: 16\n\t\t\t\t\t}} />,\n\t\t\t\t\tthis.element\n\t\t\t\t)\n\t\t\t}\telse {\n\t\t\t\trender(\n\t\t\t\t\t<div {...((props)=>{\n\t\t\t\t\t\tdelete props.isOpen;\n\t\t\t\t\t\treturn props;\n\t\t\t\t\t})({...props, ...{}})} style={{\n\t\t\t\t\t\tposition: 'fixed',\n\t\t\t\t\t\ttop: 0,\n\t\t\t\t\t\tright: 0,\n\t\t\t\t\t\tbottom: 0,\n\t\t\t\t\t\tleft: 0,\n\t\t\t\t\t\tmargin: 'auto',\n\t\t\t\t\t\twidth: 400,\n\t\t\t\t\t\theight: 400,\n\t\t\t\t\t\tbackgroundColor: '#fff',\n\t\t\t\t\t\tboxShadow: '0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23)',\n\t\t\t\t\t\tpadding: 16\n\t\t\t\t\t}} />,\n\t\t\t\t\tthis.element\n\t\t\t\t)\n\t\t\t}\n\n\t\t\t/!*this.element = renderSubtreeIntoContainer(\n\t\t\t\tthis,\n\t\t\t\t<div {...((props)=>{\n\t\t\t\t\tdelete props.isOpen;\n\t\t\t\t\treturn props;\n\t\t\t\t})({...props, ...{}})} style={{\n\t\t\t\t\tposition: 'fixed',\n\t\t\t\t\ttop: 0,\n\t\t\t\t\tright: 0,\n\t\t\t\t\tbottom: 0,\n\t\t\t\t\tleft: 0,\n\t\t\t\t\tmargin: 'auto',\n\t\t\t\t\twidth: 400,\n\t\t\t\t\theight: 400,\n\t\t\t\t\tbackgroundColor: '#fff',\n\t\t\t\t\tboxShadow: '0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23)',\n\t\t\t\t\tpadding: 16\n\t\t\t\t}} />,\n\t\t\t\tthis.node\n\t\t\t);*!/\n\t\t}\telse {\n\t\t\tthis.element && this.unMount();\n\t\t}\n\t}\n\n\tunMount(){\n\t\tif (canUseDOM) {\n\t\t\tdocument.removeEventListener('click', this.handleClickOut);\n\t\t\t//document.body.removeChild(this.node);\n\t\t\tif (this.element) {\n\t\t\t\tPortal.node.removeChild(this.element);\n\t\t\t\tthis.element = null;\n\t\t\t}\n\t\t}\n\t}\n\n\thandleClickOut() {\n\t\tif (this.props.onClickOut) {\n\t\t\tthis.props.onClickOut();\n\t\t}\n\t}\n\n\t/!*constructor(props, context) {\n\t\tsuper(props, context);\n\t\tthis.state = {\n\t\t\tisOpen: props.isOpen\n\t\t};\n\n\t\tif (canUseDOM) {\n\n\t\t\tif ( !document.getElementById(props.id) ) {\n\t\t\t\tthis.node = document.createElement('div');\n\t\t\t\tthis.node.id = props.id;\n\t\t\t\tdocument.body.appendChild(this.node);\n\t\t\t}\n\n\t\t\tthis.handleClickOut = e => {\n\t\t\t\tif (typeof this.props.onClickOut === 'function') {\n\t\t\t\t\tconst root = findDOMNode(this.element);\n\t\t\t\t\tif (!root.contains(e.target)) {\n\t\t\t\t\t\tthis.props.onClickOut(e, this.node, this.element);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tdocument.addEventListener('click', this.handleClickOut);\n\t\t}\n\t\tthis.componentWillUnmount = props.componentWillUnmount || ::this.unMount;\n\t}\n\n\thandleClickOut() {\n\t\tif (this.props.onClickOut) {\n\t\t\tthis.props.onClickOut();\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\t\tconst { id, isOpen } = this.props;\n\t\tthis.toggle(id, isOpen);\n\t}\n\n\tunMount(){\n\t\tif (canUseDOM) {\n\t\t\tdocument.removeEventListener('click', this.handleClickOut);\n\t\t\t//document.body.removeChild(this.node);\n\t\t\tif (this.element) {\n\t\t\t\tthis.node.removeChild(this.element);\n\t\t\t\tthis.element = null;\n\t\t\t}\n\t\t}\n\t}\n\n\tstatic isOpen = false;\n\tstatic toggle = (id, isOpen)=> {\n\t\tconsole.log(isOpen);\n\t\temitter.emit('toggle', id, isOpen);\n\t};\n\n\ttoggle(id, isOpen){\n\t\tconsole.log(id, isOpen);\n\t\temitter.once('toggle', ::this.toggle);\n\t\tif ( id === this.props.id ) {\n\t\t\t//this.setState({isOpen});\n\t\t\tPortal.isOpen = isOpen;\n\t\t}\n\t}\n\n\tcomponentWillUpdate(props, state) { // eslint-disable-line\n\t\tconsole.log(props, state);\n\t\tconsole.log(Portal.isOpen);\n\t\t(props.id === this.props.id) && this.mount(props, Portal.isOpen);\n\t}\n\n\tmount(props, isOpen){\n\t\tprops = props || this.props;\n\t\tif ( isOpen ) {\n\t\t\tthis.element = renderSubtreeIntoContainer(\n\t\t\t\tthis,\n\t\t\t\t<div {...((props)=>{\n\t\t\t\t\tdelete props.isOpen;\n\t\t\t\t\treturn props;\n\t\t\t\t})({...props, ...{}})} style={{\n\t\t\t\t\tposition: 'fixed',\n\t\t\t\t\ttop: 0,\n\t\t\t\t\tright: 0,\n\t\t\t\t\tbottom: 0,\n\t\t\t\t\tleft: 0,\n\t\t\t\t\tmargin: 'auto',\n\t\t\t\t\twidth: 400,\n\t\t\t\t\theight: 400,\n\t\t\t\t\tbackgroundColor: '#fff',\n\t\t\t\t\tboxShadow: '0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23)',\n\t\t\t\t\tpadding: 16\n\t\t\t\t}} />,\n\t\t\t\tthis.node\n\t\t\t);\n\t\t}\telse {\n\t\t\tthis.element && this.unMount();\n\t\t}\n\t}*!/\n\n\trender() {\n\t\treturn null;\n\t}\n\n}*/\n\n/*\nexport default class extends Modal {\n\n\tstatic defaultProps = {\n\t\tstyle: {\n\t\t\toverlay: {\n\t\t\t\tposition        : 'fixed',\n\t\t\t\ttop             : 0,\n\t\t\t\tleft            : 0,\n\t\t\t\tright           : 0,\n\t\t\t\tbottom          : 0,\n\t\t\t\tbackgroundColor : 'rgba(255, 255, 255, 0.75)'\n\t\t\t},\n\t\t\tcontent: {\n\t\t\t\tposition                : 'absolute',\n\t\t\t\ttop                     : '40px',\n\t\t\t\tleft                    : '40px',\n\t\t\t\tright                   : '40px',\n\t\t\t\tbottom                  : '40px',\n\t\t\t\tborder                  : '1px solid #ccc',\n\t\t\t\tbackground              : '#fff',\n\t\t\t\toverflow                : 'auto',\n\t\t\t\tWebkitOverflowScrolling : 'touch',\n\t\t\t\tborderRadius            : '4px',\n\t\t\t\toutline                 : 'none',\n\t\t\t\tpadding                 : '20px'\n\t\t\t}\n\t\t},\n\t\tdefaultStyles : {\n\t\t\toverlay: {\n\t\t\t\tposition        : 'fixed',\n\t\t\t\ttop             : 0,\n\t\t\t\tleft            : 0,\n\t\t\t\tright           : 0,\n\t\t\t\tbottom          : 0,\n\t\t\t\tbackgroundColor : 'rgba(255, 255, 255, 0.75)'\n\t\t\t},\n\t\t\tcontent: {\n\t\t\t\tposition                : 'absolute',\n\t\t\t\ttop                     : '40px',\n\t\t\t\tleft                    : '40px',\n\t\t\t\tright                   : '40px',\n\t\t\t\tbottom                  : '40px',\n\t\t\t\tborder                  : '1px solid #ccc',\n\t\t\t\tbackground              : '#fff',\n\t\t\t\toverflow                : 'auto',\n\t\t\t\tWebkitOverflowScrolling : 'touch',\n\t\t\t\tborderRadius            : '4px',\n\t\t\t\toutline                 : 'none',\n\t\t\t\tpadding                 : '20px'\n\t\t\t}\n\t\t}\n\t};\n\n\tcomponentWillMount(){\n\t\tconst { id, isOpen } = this.props;\n\t\tthis.toggle(id, isOpen);\n\t}\n\n\tstatic isBool(boolean) {\n\t\treturn typeof boolean === 'boolean' ? boolean : false;\n\t}\n\tstatic toggle = (id, isOpen)=> {\n\t\tPortal.isOpen[id] = Portal.isBool(isOpen);\n\t\temitter.emit('toggle', id, isOpen);\n\t};\n\n\tstatic isOpen = {};\n\ttoggle(id, isOpen){\n\t\tdebugger\n\t\temitter.once('toggle', ::this.toggle);\n\t\t/!*this.renderPortal({\n\t\t\t...this.props,\n\t\t\tisOpen\n\t\t});*!/\n\t\tisOpen ? this.open() : this.close();\n\t}\n}*/\n\n/*export default class ModalPortal extends React.Component {\n\tstatic propTypes = {\n\t\tonClose: PropTypes.func, // This is called when the dialog should close\n\t\tchildren: PropTypes.node,\n\t\tonModalDidMount: PropTypes.func, // optional, called on mount\n\t\tonModalWillUnmount: PropTypes.func, // optional, called on unmount\n\t\tisOpen: PropTypes.bool\n\t};\n\n\tstatic defaultProps = {\n\t\tisOpen: false\n\t};\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.componentWillUnmount = props.componentWillUnmount || ::this.unMount;\n\t}\n\n\tcomponentDidMount(){\n\t\t// Create a div and append it to the body\n\t\tthis._target = document.body.appendChild(document.createElement('div'));\n\n\t\t// A handler call in case you want to do something when a modal opens, like add a class to the body or something\n\t\tif (typeof this.props.onModalDidMount === 'function') {\n\t\t\tthis.props.onModalDidMount();\n\t\t}\n\t};\n\tcomponentDidUpdate(){\n\t\t// When the child component updates, we have to make sure the content rendered to the DOM is updated to\n\t\t//this.component(this.props);\n\t\tconst { id, isOpen } = this.props;\n\t\tthis.toggle(id, Portal.isBool(isOpen));\n\t};\n\n\tstatic isBool(boolean) {\n\t\treturn typeof boolean === 'boolean' ? boolean : false;\n\t}\n\tstatic toggle = (id, isOpen)=> {\n\t\temitter.emit('toggle', id, isOpen);\n\t};\n\n\tstatic isOpen = {};\n\ttoggle(id, isOpen){\n\t\temitter.once('toggle', ::this.toggle);\n\t\t// Mount a component on that div\n\t\tconsole.log(isOpen)\n\t\t!isOpen && this.unMount();\n\t}\n\n\tcomponent(props){\n\t\tthis._component = renderSubtreeIntoContainer(this, <div>{props.children}</div>, this._target);\n\t}\n\n\tunMount(){\n\t\tconst done = () => {\n\t\t\t// Modal will unmount now\n\t\t\t// Call a handler, like onModalDidMount\n\t\t\tif (typeof this.props.onModalWillUnmount === 'function') {\n\t\t\t\tthis.props.onModalWillUnmount();\n\t\t\t}\n\n\t\t\t// Remove the node and clean up after the target\n\t\t\tReactDOM.unmountComponentAtNode(this._target);\n\t\t\tdocument.body.removeChild(this._target);\n\t\t\tthis._component = null;\n\t\t};\n\n\t\t// A similar API to react-transition-group\n\t\tif ( !!(this._component) ) {\n\t\t\tif (typeof this._component.componentWillLeave == 'function') {\n\t\t\t\t// Pass the callback to be called on completion\n\t\t\t\tthis._component.componentWillLeave(done);\n\t\t\t} else {\n\t\t\t\t// Call completion immediately\n\t\t\t\tdone();\n\t\t\t}\n\t\t}\n\t}\n\n\t_target = null; // HTMLElement, a div that is appended to the body\n\t_component = null; // ReactComponent, which is mounted on the target\n\trender = () => null; // This doesn't actually return anything to render\n}*/\n\n\n/*\nexport default class Portal extends Component {\n\n\tstatic propTypes = {\n\t\tid: PropTypes.string,\n\t\tisOpen: PropTypes.bool\n\t};\n\n\tstatic defaultProps = {\n\t\tisOpen: false\n\t};\n\n\ttarget = null;\n\tportal = null;\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tisOpen: props.isOpen\n\t\t};\n\t\t// Create a div and append it to the body\n\t\tthis.target = document.body.appendChild(document.createElement('div'));\n\t\tthis.target.id = props.id;\n\t}\n\n\tcomponentWillMount(){// this.toggle();\n\t\tthis.toggle(this.props.id, this.props.isOpen);\n\t}\n\tcomponentDidUpdate(props){// this.toggle();\n\t\tconsole.log(props);\n\t\tif( props.id === this.props.id ) {\n\t\t\tthis.mount(props.id, this.state.isOpen)\n\t\t}\n\t}\n\n\tstatic toggle(id, isOpen){\n\t\temitter.emit('toggle', id, isOpen);\n\t}\n\n\ttoggle(id, isOpen){\n\t\tif ( id === this.props.id ) {\n\t\t\tthis.setState({isOpen})\n\t\t}\n\t\temitter.once('toggle', ::this.toggle);\n\t}\n\n\tstatic counter = 1;\n\tmount(id, isOpen){\n\t\t//console.log(Portal.counter, this.props, id, isOpen);\n\t\tPortal.counter++;\n\t\tswitch (isOpen) {\n\t\t\tcase true:\n\t\t\t\tthis.portal = renderSubtreeIntoContainer(this, <div>{this.props.children}</div>, this.target);\n\t\t\t\tbreak;\n\t\t\tcase false:\n\t\t\t\tunmountComponentAtNode(this.target);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\trender(){return null}\n}*/\n\n/*const Portal =  (props = {access:{}}) => (Component) => {\n\n\n\treturn class extends React.Component {\n\n\t}\n\n};*/\n\nclass PortalContent extends Component {\n\tstatic propTypes = {\n\t\tonClose: PropTypes.func, // This is called when the dialog should close\n\t\tchildren: PropTypes.node,\n\t\tonModalDidMount: PropTypes.func, // optional, called on mount\n\t\tonModalWillUnmount: PropTypes.func, // optional, called on unmount\n\t};\n\tstatic defaultProps = {\n\t\tmountTo: 'modals',\n\t\tisOpen: false,\n\t\ttoggle: {\n\t\t\tbefore: ()=>{},\n\t\t\tafter: ()=>{}\n\t\t}\n\t};\n\tcomponentDidMount(){\n\t\t/*// Create a div and append it to the body\n\t\tconst { id } = this.props;\n\t\tthis.portal = document.getElementById(id);\n\t\tthis.portal = document.createElement('div');\n\t\tthis.portal.id = id;\n\t\tthis._target = document.getElementById(this.props.mountTo).appendChild(this.portal);\n\n\t\t//this._target = document.body.appendChild(document.createElement('div'));\n\n\t\t// Mount a component on that div\n\t\tthis.component(this.props);\n\n\t\t// A handler call in case you want to do something when a modal opens, like add a class to the body or something\n\t\tif (typeof this.props.onModalDidMount === 'function') {\n\t\t\tthis.props.onModalDidMount();\n\t\t}*/\n\t\t// Mount a component on that div\n\t\tthis.component(this.props);\n\t};\n\n\tconstructor(props)\n\t{\n\t\tsuper(props);\n\t\tthis.componentWillUnmount = ::this.unMount;\n\t\t//this.componentWillReceiveProps = ::this.component;\n\t}\n\n\tcomponentDidUpdate(){\n\t\t// When the child component updates, we have to make sure the content rendered to the DOM is updated to\n\t\tthis.component(this.props);\n\t};\n\n\tcomponent(props){\n\t\tconst { id, className, isOpen } = props;\n\t\t/*this._component = renderSubtreeIntoContainer(this, <div>{props.children}</div>, this._target);\n\t\tconst portal = this.portal;\n\t\tthis.timer = setTimeout(()=>{\n\t\t\tportal.className = classNames(className, {\n\t\t\t\topen: isOpen\n\t\t\t});\n\t\t\tthis.timer && clearTimeout(this.timer);\n\t\t}, 100);*/\n\t\tthis.portal = document.getElementById(id);\n\t\t//const { className } = this.props;\n\n\t\tif ( !this.portal ) {\n\t\t\tthis.portal = document.createElement('div');\n\t\t\tthis.portal.id = id;\n\t\t\tdocument.getElementById(this.props.mountTo).appendChild(this.portal);\n\t\t}\n\t\tif ( isOpen && !!(this.portal) ) {\n\t\t\tthis.child();\n\t\t\t// Fix portal is null\n\t\t\tconst portal = this.portal;\n\t\t\tthis.timer = setTimeout(()=>{\n\t\t\t\tportal.className = classNames(className, {\n\t\t\t\t\topen: isOpen\n\t\t\t\t});\n\t\t\t\tthis.timer && clearTimeout(this.timer);\n\t\t\t}, 100);\n\t\t}\n\n\t\t( !isOpen && this.portal ) && this.unMount();\n\t}\n\n\tchild() {\n\t\tconst { children } = this.props;\n\t\trenderSubtreeIntoContainer(this, children, this.portal);\n\t}\n\n\t/*componentWillUnmount(){\n\t\tthis.unMount();\n\t};*/\n\n\tunMount(){\n\t\tif ( !!(this.portal) ) {\n\t\t\t// Remove the node and clean up after the target\n\t\t\tunmountComponentAtNode(this.portal);\n\t\t\tdocument.getElementById(this.props.mountTo).removeChild(this.portal);\n\t\t\tthis.portal = null;\n\t\t}\n\t}\n\n\t/*unMount()  {\n\t\tPortal.isOpen = false;\n\t\tif ( this.portal ) {\n\t\t\tunmountComponentAtNode(this.portal);\n\t\t\tdocument.getElementById(this.props.mountTo).removeChild(this.portal);\n\t\t\tthis.portal = null;\n\t\t}\n\t}*/\n\n\t_target = null; // HTMLElement, a div that is appended to the body\n\t_component = null; // ReactComponent, which is mounted on the target\n\trender = () => null; // This doesn't actually return anything to render\n}\n\nexport default class Portal extends Component {\n\n\tstatic propTypes = {\n\t\tisOpen: PropTypes.bool\n\t};\n\n\tstatic defaultProps = {\n\t\tisOpen: false\n\t};\n\n\tstatic isOpen = false;\n\tconstructor(props){\n\t\tsuper(props);\n\t\tconst { isOpen } = props;\n\t\tthis.state = {isOpen};\n\t\tthis.emitter = false\n\t}\n\n\t/*componentDidMount(){\n\t\tthis.toggle(this.props.id, this.props.isOpen);\n\t}\n\n\tcomponentDidUpdate(props, state){\n\t\tconsole.log(props, state);\n\t\tconsole.log(this.props, this.state);\n\t\tconsole.log(Portal.isOpen);\n\t\temitter.removeAllListeners();\n\t\tthis.toggle(this.props.id, this.state.isOpen);\n\t\t/!*if ( !!(this.emitter) ) {\n\t\t\tthis.emitter = null;\n\t\t\tthis.toggle(this.props.id, this.props.isOpen);\n\t\t}*!/\n\t}*/\n\n\tcomponentDidMount() {\n\t\tconst { id, isOpen } = this.props;\n\t\tthis.toggle(id, isOpen);\n\t}\n\n\tstatic toggle(id, isOpen){\n\t\temitter.emit('toggle', id, isOpen);\n\t\tPortal.isOpen = isOpen;\n\t}\n\n\ttoggle(id, isOpen){\n\t\temitter.once('toggle', ::this.toggle);\n\t\tif ( id !== this.props.id ) return;\n\t\tif ( isOpen !== this.state.isOpen ) {\n\t\t\tthis.setState({isOpen})\n\t\t}\n\t}\n\n\trender(){\n\t\tconst { id, ...other } = this.props;\n\t\t//console.log(id, this.state);\n\t\treturn (\n\t\t\t<PortalContent id={id} { ...other } isOpen={this.state.isOpen}>\n\t\t\t\t{ this.props.children }\n\t\t\t</PortalContent>\n\t\t);\n\t}\n}\n\n\n"]}