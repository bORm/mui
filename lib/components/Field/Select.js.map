{"version":3,"sources":["components/Field/Select.js"],"names":["Select","state","value","field","props","callback","defaultValue","hasValue","isValidValue","Children","forEach","children","child","text","setState","hasOwnProperty","floating","placeholder","autoComplete","type","name","large","small","block","required","disabled","success","warning","danger","inputProps","ref","readOnly","control","e","selected","onChange","onBlur","target","options","map","option","key","propTypes","func","defaultProps"],"mappings":"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","file":"Select.js","sourcesContent":["import React, {Component, PropTypes, Children} from 'react'\nimport { findDOMNode } from 'react-dom'\nimport DropDown, { Item } from 'components/DropDown/DropDown'\nimport Field from 'components/Field/Field'\n\n/*class Select extends Component {\n\tstatic propTypes = {\n    ...Field.propTypes,\n    onChange: PropTypes.func,\n    onBlur: PropTypes.func,\n\t};\n\n\tstatic defaultProps = {\n    ...Field.defaultProps,\n    type: 'select',\n    onChange: (e, selected)=>{},\n    onBlur: e=>{},\n\t\tvalue: {\n      select: '',\n      input: ''\n\t\t}\n\t};\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.select = null;\n\t\tthis.input = null;\n\t\tthis.state = {\n\t\t\t//value: props.value\n\t\t\tinputValue: ''\n\t\t}\n\t}\n\n\tcomponentDidMount(){\n\t\tthis.select = findDOMNode(this.refs['select']);\n\t\tthis.input = findDOMNode(this.refs['input']);\n\t\tthis.selected = this.state;\n\t}\n\n\tcomponentWillReceiveProps(props){\n\n\t\tconst { value } = props;\n\t\t/!*if ( value.select != '' && value.input != '' ) {\n      this.selected = props;\n\t\t}*!/\n\t\tconsole.log(value)\n    this.selected = props;\n\n\t}\n\n\tset selected(props){\n    const { value } = props;\n\n    let selected = false;\n    if ( value.select !== '' ) {\n      React.Children.forEach(this.props.children, (child) => {\n        if (child && child.props.value == value.select) {\n          selected = true;\n        }\n      });\n    }\n\n    this.setState({\n      value: !selected ? Select.defaultProps.value : value\n    });\n\t}\n\n\trender() {\n\n\t\tconst {\n\t\t\tfloating,\n\t\t\tplaceholder,\n\t\t\tautoComplete,\n\t\t\t// value: '',\n\t\t\t// defaultValue: '',\n\t\t\ttype, name,\n\t\t\tlarge, small, block,\n\t\t\trequired, readOnly, disabled,\n\t\t\tsuccess, warning, danger\n\t\t} = this.props;\n\n\t\tconst fieldProps = {\n\t\t\tfloating,\n\t\t\tplaceholder,\n\t\t\tautoComplete,\n\t\t\t// value: '',\n\t\t\t// defaultValue: '',\n\t\t\ttype, name,\n\t\t\tlarge, small, block,\n\t\t\trequired, readOnly, disabled,\n\t\t\tsuccess, warning, danger\n\t\t};\n\n\t\tconst { inputValue } = this.state;\n\n\t\tconst control = (\n\t\t\t<Field {...{...fieldProps, name: '', required: false, ref: 'input', value: inputValue, readOnly:true}} />\n\t\t);\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<DropDown control={control} onChange={(e, selected)=>{\n\t\t\t\t\tlet value = {\n\t\t\t\t\t\tselect: selected.value,\n\t\t\t\t\t\tinput: selected.text\n\t\t\t\t\t};\n\t\t\t\t\tthis.setState({value}, ()=>{\n\t\t\t\t\t\tthis.props.onChange(e, selected);\n            this.props.onBlur({\n              target: {\n                value: value.select\n              }\n            });\n\t\t\t\t\t});\n\t\t\t\t}}>\n\t\t\t\t\t{ this.props.children }\n\t\t\t\t</DropDown>\n\t\t\t\t<select hidden {...{name, required}} ref=\"select\" value={value.select} onChange={e=>{}}>\n\t\t\t\t\t<option value=\"\" hidden>Select</option>\n\t\t\t\t\t{ ((options)=>{\n\t\t\t\t\t\tlet value, text;\n\t\t\t\t\t\treturn options.map(option=>{\n\t\t\t\t\t\t\ttext = !!(option.props.text) ? option.props.text : option.props.children;\n\t\t\t\t\t\t\tvalue = option.props.value ? option.props.value : text;\n\t\t\t\t\t\t\treturn <option key={option.key} value={value}>{text}</option>;\n\t\t\t\t\t\t})\n\t\t\t\t\t})(this.props.children) }\n\t\t\t\t</select>\n\t\t\t</div>\n\t\t);\n\t}\n}*/\n\nclass Select extends Component {\n\n  static propTypes = {\n    ...Field.propTypes,\n    onChange: PropTypes.func,\n    onBlur: PropTypes.func,\n  };\n\n  static defaultProps = {\n    ...Field.defaultProps,\n    type: 'select',\n    onChange: (e, selected)=>{},\n    onBlur: e=>{},\n  };\n\n  /**\n   * Check isValid oneOf([value, defaultValue])\n   * @param props\n   * @param callback\n   * value = value || defaultValue\n   * setState({value});\n   */\n  hasValue(props, callback = ()=>{}){\n    const {value, defaultValue} = props;\n    const hasValue = Field.isValidValue(value)\n      ? value\n      : Field.isValidValue(defaultValue)\n        ? defaultValue\n        : '';\n\n    let field = '';\n    if ( hasValue !== '' ) {\n      React.Children.forEach(props.children, (child) => {\n        if (child && child.props.value == hasValue) {\n          field = child.props.text;\n        }\n      });\n    }\n\n    this.setState({\n      value: hasValue,\n      field: field,\n      hasValue: !!(typeof hasValue === 'number' ? JSON.stringify(hasValue) : hasValue)\n    }, callback);\n    return hasValue;\n  }\n\n  state = {\n  \tvalue: '',\n\t\tfield: ''\n\t};\n\n  componentWillMount(){\n  \tthis.hasValue(this.props);\n\t}\n\n  componentWillReceiveProps(props){\n\n    if ( props.hasOwnProperty('value') ) {\n      this.hasValue(props);\n    }\telse {\n      this.hasValue({\n\t\t\t\t...props,\n\t\t\t\tvalue: this.state.value\n\t\t\t});\n\t\t}\n\n\t}\n\n  render(){\n    const {\n      floating,\n      placeholder,\n      autoComplete,\n      // value: '',\n      defaultValue,\n      type, name,\n      large, small, block,\n      required, disabled,\n      success, warning, danger\n    } = this.props;\n\n    const { value, field } = this.state;\n\n    const inputProps = {\n      floating,\n      placeholder,\n      autoComplete,\n      // value: '',\n      // defaultValue: '',\n      type, disabled, value: field,\n      large, small, block,\n      success, warning, danger,\n      name: '', required: false,\n\t\t\tref: 'input', readOnly:true\n    };\n\n    const control = (\n\t\t\t<Field {...inputProps} />\n    );\n\n  \treturn (\n\t\t\t<div>\n\t\t\t\t<DropDown control={control} onChange={(e, selected)=>{\n\t\t\t\t\tconst { value } = selected;\n          this.hasValue({defaultValue, value}, ()=>{\n            this.props.onChange(e, selected);\n            this.props.onBlur({target: {value}});\n\t\t\t\t\t});\n          {/*let value = {\n            select: selected.value,\n            input: selected.text\n          };\n          this.setState({value}, ()=>{\n            this.props.onChange(e, selected);\n            this.props.onBlur({\n              target: {\n                value: value.select\n              }\n            });\n          });*/}\n        }}>\n          { this.props.children }\n\t\t\t\t</DropDown>\n\t\t\t\t<select hidden {...{name, required}} ref=\"select\" value={value} onChange={e=>{}}>\n\t\t\t\t\t<option value=\"\" hidden>Select</option>\n          { ((options)=>{\n            let value, text;\n            return Children.map(options, (option)=>{\n              text = !!(option.props.text) ? option.props.text : option.props.children;\n              value = option.props.value ? option.props.value : text;\n              return <option key={option.key} value={value}>{text}</option>;\n            });\n            {/*let value, text;\n            return options.map(option=>{\n              text = !!(option.props.text) ? option.props.text : option.props.children;\n              value = option.props.value ? option.props.value : text;\n              return <option key={option.key} value={value}>{text}</option>;\n            })*/}\n          })(this.props.children) }\n\t\t\t\t</select>\n\t\t\t</div>\n\t\t);\n\t}\n\n}\n\nexport default Select"]}