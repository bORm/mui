{"version":3,"sources":["components/Tabs/Tabs.js"],"names":["Tabs","props","active","parseInt","state","last","hasArrows","translateX","translateI","range","min","max","labels","refs","titles","window","addEventListener","removeEventListener","dir","offsetWidth","translate","DOM","labelsWidth","length","children","Childs","Array","join","split","map","i","index","reduce","sum","reverse","setState","console","log","tabs","contents","child","inkBar","transform","tab","key","type","name","push","label","disabled","className","style","display","opacity","paginate","w","scrollWidth","titlesWidth","slice","visibleWidth","TAB","width","left","offsetLeft","onChange","propTypes","oneOfType","number","string","func","defaultProps","Tab"],"mappings":"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","file":"Tabs.js","sourcesContent":["import React, {Component, PropTypes, Children, cloneElement} from 'react'\nimport { findDOMNode } from 'react-dom'\nimport Tab from 'components/Tabs/Tab'\nimport Button from 'components/Button/Button'\nimport classNames from 'helpers/classNames'\n\nclass Tabs extends Component {\n  static propTypes = {\n    active: PropTypes.oneOfType([\n      PropTypes.number, PropTypes.string\n    ]),\n    onChange: PropTypes.func\n  };\n\n  static defaultProps = {\n    active: 0,\n\t\tonChange: ()=>{}\n  };\n\n  constructor(props) {\n    super(props);\n    const active = parseInt(props.active);\n    this.state = {\n      ...props,\n      active,\n      last: parseInt(props.last),\n      hasArrows: false,\n      translateX: 0,\n      translateI: 0,\n      range: {\n        min: 0,\n        max: 0\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.labels = findDOMNode(this.refs['labels']);\n    this.titles = findDOMNode(this.refs['titles']);\n\n    this.active = this.props;\n\n    window.addEventListener('resize', ()=>{\n      this.active = this.props;\n    });\n  }\n\n  componentWillUnmount(){\n    window.removeEventListener('resize', ()=>{});\n  }\n\n  componentWillReceiveProps(props){\n    if ( props.active !== this.state.active ) {\n\t\t\tthis.active = props\n    }\n  }\n\n  set index(active){\n    //const { active } = this.state;\n    let i = 0, w = 0,\n      scrollWidth = 0,\n      labelsWidth = this.labels.offsetWidth,\n      titlesWidth = this.titles.offsetWidth,\n      translate = {\n        min: 0,\n        max: titlesWidth - labelsWidth\n      };\n\n    this.range = active;\n\n    new Array(active + 1).join().split(',').map((tab, index)=>{\n      scrollWidth += findDOMNode(this.refs['li' + index]).offsetWidth;\n    });\n\n    let translateX = translate.min;\n\n    if ( ( scrollWidth - labelsWidth ) > 0 ) {\n      while ( ++i ) {\n        w += findDOMNode(this.refs['li' + (i-1)]).offsetWidth;\n        if ( w > ( scrollWidth - labelsWidth ) ) {\n          translateX = w;\n          break;\n        }\n      }\n    }\n\n    ( translateX > translate.max ) && ( translateX = translate.max );\n    this.setState({translateX});\n  }\n\n  set range(active){\n\n    let visibleWidth = 0\n      , labelsWidth = this.labels.offsetWidth\n      , { range } = this.state,\n      length = this.props.children.length;\n\n    range.min = active;\n    new Array(length).join().split(',').map((i, index)=>index)\n      .slice(active).map((i)=> {\n\n      visibleWidth += findDOMNode(this.refs['li' + i]).offsetWidth;\n      if ( visibleWidth < labelsWidth ) {\n        range.max = i;\n      }\n\n    });\n\n    // console.log(visibleWidth);\n    // console.log(range);\n\n    this.setState({range});\n  }\n\n  paginate(dir){\n\n    let { translateX } = this.state;\n\n    const offsetWidth = {\n      titles: this.titles.offsetWidth,\n      labels: this.labels.offsetWidth\n    };\n\n    const translate = {\n      min: 0,\n      max: offsetWidth.titles - offsetWidth.labels\n    };\n\n    let { translateI } = this.state;\n\n    let DOM, labelsWidth = this.labels.offsetWidth;\n\n    let length = this.props.children.length;\n    let Childs = new Array(length).join().split(',').map((i, index)=>index);\n\n    //console.log(Childs)\n\n    if ( dir === 'right' ) {\n\n      offsetWidth.labels = Childs.reduce((sum, i)=>{\n        DOM = findDOMNode(this.refs['li' + i]);\n        if ( i >= translateI && ( sum + DOM.offsetWidth ) < labelsWidth ) {\n          sum += DOM.offsetWidth;\n          translateI = i;\n        }\n        return sum;\n      }, 0);\n\n      translateX = ((translateX)=>{\n        return translateX > translate.max ? translate.max : translateX;\n      })(translateX + offsetWidth.labels)\n    } else if ( dir === 'left' ) {\n\n      offsetWidth.labels = Childs.reverse().reduce((sum, i)=>{\n        DOM = findDOMNode(this.refs['li' + i]);\n        if ( i <= translateI && ( sum + DOM.offsetWidth ) < labelsWidth ) {\n          sum += DOM.offsetWidth;\n          translateI = i;\n        }\n        return sum;\n      }, 0);\n\n      translateX = ((translateX)=>{\n        return translateX < translate.min ? translate.min : translateX;\n      })(translateX - offsetWidth.labels)\n    }\n\n    this.setState({\n      translateX: translateX, translateI\n    })\n\n    /*const { range } = this.state;\n\n    let length = this.props.children.length;\n    let active;\n    if ( dir === 'right' ) {\n\n      active = ((active)=>{\n        return active > length ? length : active;\n      })(range.max + 1);\n\n    } else {\n\n      active = ((active)=>{\n        return active < 0 ? 0 : active;\n      })(range.min - 1);\n\n    }\n\n    let i = 0, w = 0,\n      scrollWidth = 0,\n      labelsWidth = this.labels.offsetWidth,\n      titlesWidth = this.titles.offsetWidth,\n      translate = {\n        min: 0,\n        max: titlesWidth - labelsWidth\n      };\n\n    this.range = active;\n\n    new Array(active).join().split(',').map((tab, index)=>{\n      scrollWidth += findDOMNode(this.refs['li' + index]).offsetWidth;\n    });\n\n    let translateX = translate.min;\n\n    if ( ( scrollWidth - labelsWidth ) > 0 ) {\n      while ( ++i ) {\n        w += findDOMNode(this.refs['li' + (i-1)]).offsetWidth;\n        if ( w > ( scrollWidth - labelsWidth ) ) {\n          translateX = w;\n          break;\n        }\n      }\n    }\n\n    ( translateX > translate.max ) && ( translateX = translate.max );\n    this.setState({translateX});*/\n  }\n\n  set active(props){\n\n    //const { translateX, translateI } = this.state;\n\n    this.setState({\n      hasArrows: this.titles.offsetWidth > this.labels.offsetWidth\n    }, ()=>{\n      let { active } = props;\n      active = parseInt(active);\n      let TAB = props.children[active];\n      if ( TAB ) {\n        if ( TAB.props.disabled ) {\n          active = this.state.active;\n        }\n\n        /*const offsetWidth = {\n          titles: this.titles.offsetWidth,\n          labels: this.labels.offsetWidth\n        };\n\n        const translate = {\n          min: 0,\n          max: offsetWidth.titles - offsetWidth.labels\n        };\n\n        //let index = ;\n        let length = props.children.length - 1, index;\n        if ( active > this.state.active || translateI > active ) {\n\n          index = active - 1;\n          index = index < 0 ? 0 : index;\n\n          this.setState({\n            translateX: ((translateX)=>{\n              return translateX > translate.max ? translate.max : translateX;\n            })(translateX + findDOMNode(this.refs['li' + index]).offsetWidth)\n          })\n        } else if ( active < this.state.active || translateI < active ) {\n          index = active + 1;\n          index = index > length ? length : index;\n\n          this.setState({\n            translateX: ((translateX)=>{\n              return translateX < translate.min ? translate.min : translateX;\n            })(translateX - findDOMNode(this.refs['li' + index]).offsetWidth)\n          })\n        }*/\n\n        let DOM = findDOMNode(this.refs['li' + active]);\n        this.setState({\n          active: active,\n          translateI: active,\n          last  : this.state.active,\n          inkBar: {\n            width : DOM.offsetWidth\n          , left  : DOM.offsetLeft\n          }\n        }, ()=>{\n\n          this.index = this.state.active;\n\n          this.props.onChange(this.state.active)\n        })\n      }\n\n      //this.translateX('right');\n\n    });\n  }\n\n  translateX(dir){\n    let { translateX } = this.state;\n\n    const offsetWidth = {\n      titles: this.titles.offsetWidth,\n      labels: this.labels.offsetWidth\n    };\n\n    const translate = {\n      min: 0,\n      max: offsetWidth.titles - offsetWidth.labels\n    };\n\n    let { translateI } = this.state;\n\n    let DOM, labelsWidth = this.labels.offsetWidth;\n\n    let length = this.props.children.length;\n    let Childs = new Array(length).join().split(',').map((i, index)=>index);\n\n    console.log(Childs)\n\n    if ( dir === 'right' ) {\n\n      offsetWidth.labels = Childs.reduce((sum, i)=>{\n        DOM = findDOMNode(this.refs['li' + i]);\n        if ( i >= translateI && ( sum + DOM.offsetWidth ) < labelsWidth ) {\n          sum += DOM.offsetWidth;\n          translateI = i;\n        }\n        return sum;\n      }, 0);\n\n      translateX = ((translateX)=>{\n        return translateX > translate.max ? translate.max : translateX;\n      })(translateX + offsetWidth.labels)\n    } else if ( dir === 'left' ) {\n\n      offsetWidth.labels = Childs.reverse().reduce((sum, i)=>{\n        DOM = findDOMNode(this.refs['li' + i]);\n        if ( i <= translateI && ( sum + DOM.offsetWidth ) < labelsWidth ) {\n          sum += DOM.offsetWidth;\n          translateI = i;\n        }\n        return sum;\n      }, 0);\n\n      translateX = ((translateX)=>{\n        return translateX < translate.min ? translate.min : translateX;\n      })(translateX - offsetWidth.labels)\n    }\n\n    this.setState({\n      translateX: translateX, translateI\n    })\n  }\n\n  render() {\n    const tabs = {\n      titles: [],\n      contents: []\n    };\n\n    const child = [];\n\n    const { active, last, inkBar, hasArrows, translateX, translateI } = this.state;\n    // const count = Children.count(this.props.children);\n    // const width = 100 / count;\n\n    //console.log(translateI)\n\n    let transform = 100 * (-1);\n\n    Children.map(this.props.children, (tab, key)=>{\n\n      if ( tab.type.name === 'Tab' )  {\n        tabs.titles.push(\n          <li ref={'li'+key} className={classNames('tab-title', {\n            active: key === active\n          })} key={key} onClick={e=>this.active = {...this.props, active: key}}>\n            { typeof tab.props.label === 'string' ? (\n                <Button text={tab.props.label} disabled={tab.props.disabled}/>\n              ) : tab.props.label }\n          </li>\n        );\n\n        if ( key === active ) {\n          transform = 0;\n        } else if ( key > active ) {\n          transform = 100;\n        }\n\n        tabs.contents.push(\n          cloneElement(tab, {\n            className: classNames('tab-content', tab.props.className, {\n              active: key === active\n            }),\n            style: {\n              // width: width + '%',\n              // transform: `translateX(${transform}%)`,\n              // position: key === active ? 'relative' : 'absolute',\n              //visibility: key === active || key === last ? 'visible' : 'hidden',\n              display: key === active ? 'block' : 'none',\n              opacity: key === active ? 1 : 0,\n            }, key\n          })\n        );\n      } else {\n        child.push(tab);\n      }\n\n    });\n\n    return (\n      <div className={classNames('tabs', this.props.className)}>\n\n        <div className=\"tabs-header\">\n          { hasArrows && ([\n            <a href=\"#\" className=\"material-icon left\"\n               key={'left'}  onClick={e=>this.paginate('left')}>\n              chevron_left\n            </a>,\n            <a href=\"#\" className=\"material-icon right\"\n               key={'right'} onClick={e=>this.paginate('right')}>\n              chevron_right\n            </a>,\n          ]) }\n\n          <div ref={'labels'} className={classNames('tabs-labels', {hasArrows})}>\n            <ul ref={'titles'} style={{\n              transform: `translateX(-${translateX}px)`,\n            }}>\n              { tabs.titles }\n              <li className=\"ink-bar\" style={inkBar}/>\n            </ul>\n          </div>\n        </div>\n        <div className=\"tabs-container\">\n          <div className=\"tabs-content\" style={{/*{width: count * 100 + '%'}*/}}>\n            { tabs.contents }\n          </div>\n        </div>\n        { child }\n      </div>\n    );\n  }\n}\n\nexport default Tabs\nexport { Tab }\n\n/**\n *\n * [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ]\n *\n * offsetWidth = 20;\n * translateX = 0;\n *\n * default range = [ 0, 3 ]\n * [ 0, 1, 2, 3 ], 4, 5, 6, 7, 8, 9\n *\n * set active(index) {\n*\n *   let min =  Math.min(range)\n *   let max =  Math.max(range)\n *\n *   let { translateX } = this.state;\n *\n *   if ( index >= max ) {\n *\n *    translateX = this.offsetWidth(index) - this.offsetWidth(max);\n *\n *   }\n *\n *   else if ( index <= min ) {\n *\n *\n *\n *   }\n *\n * }\n *\n * get offsetWidth(length){\n *   return new Array(length).join().split(',').map((i, index)=>index).offsetWidth;\n * }\n *\n *\n *\n * // =============== 4\n * <- range = [ 0, 3 ]\n * active = 4\n *\n * call set active(index = 4){\n *\n *  let translateX;\n *\n *  if ( 4 > 3 ) {\n *\n *    translateX = this.offsetWidth(4) - this.offsetWidth(3) = 20;\n *\n *  }\n *\n *  -> range = [ 1, 2, 3, 4 ]\n *\n * }\n *\n * // =============== 6\n * <- range = [ 0, 3 ]\n * active = 6\n *\n * call set active(index = 6){\n *\n *  if ( 6 > 3 ) {\n *    translateX = this.offsetWidth(6) - this.offsetWidth(3);\n *  }\n *\n *  -> range = [ 3, 4, 5, 6 ]\n *\n * }\n *\n * // =============== 6\n * <- range = [ 3, 6 ]\n * active = 6\n *\n * call set active(index = 6){\n *\n *  if ( 6 > 3 ) {\n *    translateX = this.offsetWidth(6) - this.offsetWidth(3);\n *  }\n *\n *  -> range = [ 3, 4, 5, 6 ]\n * }\n */\n\n\n\n\n\n/**\n *\n * active = 0\n *\n * set range(index){\n *\n *  let visibleWidth\n *    , { range } = this.state;\n *\n*   range.min = index;\n*\n *  new Array(this.props.children.length).join().split(',').map((i, index)=>index)\n *  .map(i=>{\n *\n *    visibleWidth += findDOMNode(this.refs['li' + i]).offsetWidth;\n *\n *\n *\n *  })\n *\n * }\n *\n */"]}