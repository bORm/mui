{"version":3,"sources":["components/Forms/Mixin.js"],"names":["utils","require","React","global","convertValidationsToObject","validations","split","reduce","validation","args","validateMethod","shift","map","arg","JSON","parse","e","length","Error","module","exports","getInitialState","_value","props","value","_isRequired","_isValid","_isPristine","_pristineValue","_validationError","_externalError","_formSubmitted","contextTypes","formsy","PropTypes","object","getDefaultProps","validationError","validationErrors","componentWillMount","configure","setValidations","required","context","attachToForm","bind","name","componentWillReceiveProps","nextProps","componentDidUpdate","prevProps","isSame","setValue","validate","componentWillUnmount","detachFromForm","_validations","_requiredValidations","isDefaultRequiredValue","setState","resetValue","state","getValue","hasValue","getErrorMessage","messages","getErrorMessages","isValid","showRequired","isFormDisabled","isPristine","isFormSubmitted","isRequired","showError","isValidValue","call"],"mappings":"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","file":"Mixin.js","sourcesContent":["var utils = require('./utils.js');\nvar React = global.React || require('react');\n\nvar convertValidationsToObject = function (validations) {\n\n  if (typeof validations === 'string') {\n\n    return validations.split(/\\,(?![^{\\[]*[}\\]])/g).reduce(function (validations, validation) {\n      var args = validation.split(':');\n      var validateMethod = args.shift();\n\n      args = args.map(function (arg) {\n        try {\n          return JSON.parse(arg);\n        } catch (e) {\n          return arg; // It is a string if it can not parse it\n        }\n      });\n\n      if (args.length > 1) {\n        throw new Error('Formsy does not support multiple args on string validations. Use object format of validations instead.');\n      }\n\n      validations[validateMethod] = args.length ? args[0] : true;\n      return validations;\n    }, {});\n\n  }\n\n  return validations || {};\n};\n\nmodule.exports = {\n  getInitialState: function () {\n    return {\n      _value: this.props.value,\n      _isRequired: false,\n      _isValid: true,\n      _isPristine: true,\n      _pristineValue: this.props.value,\n      _validationError: [],\n      _externalError: null,\n      _formSubmitted: false\n    };\n  },\n  contextTypes: {\n    formsy: React.PropTypes.object // What about required?\n  },\n  getDefaultProps: function () {\n    return {\n      validationError: '',\n      validationErrors: {}\n    };\n  },\n\n  componentWillMount: function () {\n    var configure = function () {\n      this.setValidations(this.props.validations, this.props.required);\n\n      // Pass a function instead?\n      this.context.formsy.attachToForm(this);\n      //this.props._attachToForm(this);\n    }.bind(this);\n\n    if (!this.props.name) {\n      throw new Error('Form Input requires a name property when used');\n    }\n\n    /*\n    if (!this.props._attachToForm) {\n      return setTimeout(function () {\n        if (!this.isMounted()) return;\n        if (!this.props._attachToForm) {\n          throw new Error('Form Mixin requires component to be nested in a Form');\n        }\n        configure();\n      }.bind(this), 0);\n    }\n    */\n    configure();\n  },\n\n  // We have to make the validate method is kept when new props are added\n  componentWillReceiveProps: function (nextProps) {\n    this.setValidations(nextProps.validations, nextProps.required);\n\n  },\n\n  componentDidUpdate: function (prevProps) {\n\n    // If the value passed has changed, set it. If value is not passed it will\n    // internally update, and this will never run\n    if (!utils.isSame(this.props.value, prevProps.value)) {\n      this.setValue(this.props.value);\n    }\n\n    // If validations or required is changed, run a new validation\n    if (!utils.isSame(this.props.validations, prevProps.validations) || !utils.isSame(this.props.required, prevProps.required)) {\n      this.context.formsy.validate(this);\n    }\n  },\n\n  // Detach it when component unmounts\n  componentWillUnmount: function () {\n    this.context.formsy.detachFromForm(this);\n    //this.props._detachFromForm(this);\n  },\n\n  setValidations: function (validations, required) {\n\n    // Add validations to the store itself as the props object can not be modified\n    this._validations = convertValidationsToObject(validations) || {};\n    this._requiredValidations = required === true ? {isDefaultRequiredValue: true} : convertValidationsToObject(required);\n\n  },\n\n  // We validate after the value has been set\n  setValue: function (value) {\n    this.setState({\n      _value: value,\n      _isPristine: false\n    }, function () {\n      this.context.formsy.validate(this);\n      //this.props._validate(this);\n    }.bind(this));\n  },\n  resetValue: function () {\n    this.setState({\n      _value: this.state._pristineValue,\n      _isPristine: true\n    }, function () {\n      this.context.formsy.validate(this);\n      //this.props._validate(this);\n    });\n  },\n  getValue: function () {\n    return this.state._value;\n  },\n  hasValue: function () {\n    return this.state._value !== '';\n  },\n  getErrorMessage: function () {\n    var messages = this.getErrorMessages();\n    return messages.length ? messages[0] : null;\n  },\n  getErrorMessages: function () {\n    return !this.isValid() || this.showRequired() ? (this.state._externalError || this.state._validationError || []) : [];\n  },\n  isFormDisabled: function () {\n    return this.context.formsy.isFormDisabled();\n    //return this.props._isFormDisabled();\n  },\n  isValid: function () {\n    return this.state._isValid;\n  },\n  isPristine: function () {\n    return this.state._isPristine;\n  },\n  isFormSubmitted: function () {\n    return this.state._formSubmitted;\n  },\n  isRequired: function () {\n    return !!this.props.required;\n  },\n  showRequired: function () {\n    return this.state._isRequired;\n  },\n  showError: function () {\n    return !this.showRequired() && !this.isValid();\n  },\n  isValidValue: function (value) {\n    return this.context.formsy.isValidValue.call(null, this, value);\n    //return this.props._isValidValue.call(null, this, value);\n  }\n};\n"]}